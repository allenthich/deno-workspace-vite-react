/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.11
 */
import type { Context, Env } from 'hono';


// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;

import { Pet,
AddPetRequest,
Pet,
FindPetsByStatusParams,
FindPetsByTagsParams,
UpdatePetWithFormParams,
UploadFileParams,
Order,
Order,
User,
User,
LoginUserParams,
User } from './pets.schemas';

export type UpdatePetContext<E extends Env = any> = Context<E, '/pet', { in: { json: NonReadonly<Pet>, }, out: { json: NonReadonly<Pet>, } }>
export type AddPetContext<E extends Env = any> = Context<E, '/pet', { in: { json: NonReadonly<AddPetRequest | Pet>, }, out: { json: NonReadonly<AddPetRequest | Pet>, } }>
export type FindPetsByStatusContext<E extends Env = any> = Context<E, '/pet/findByStatus', { in: { query: FindPetsByStatusParams, }, out: { query: FindPetsByStatusParams, } }>
export type FindPetsByTagsContext<E extends Env = any> = Context<E, '/pet/findByTags', { in: { query: FindPetsByTagsParams, }, out: { query: FindPetsByTagsParams, } }>
export type GetPetByIdContext<E extends Env = any> = Context<E, '/pet/:petId', { in: { param: {
 petId: number,
 }, }, out: { param: {
 petId: number,
 }, } }>
export type UpdatePetWithFormContext<E extends Env = any> = Context<E, '/pet/:petId', { in: { param: {
 petId: number,
 },query: UpdatePetWithFormParams, }, out: { param: {
 petId: number,
 },query: UpdatePetWithFormParams, } }>
export type DeletePetContext<E extends Env = any> = Context<E, '/pet/:petId', { in: { param: {
 petId: number,
 }, }, out: { param: {
 petId: number,
 }, } }>
export type UploadFileContext<E extends Env = any> = Context<E, '/pet/:petId/uploadImage', { in: { param: {
 petId: number,
 },query: UploadFileParams,json: Blob, }, out: { param: {
 petId: number,
 },query: UploadFileParams,json: Blob, } }>
export type GetInventoryContext<E extends Env = any> = Context<E, '/store/inventory'>
export type PlaceOrderContext<E extends Env = any> = Context<E, '/store/order', { in: { json: Order, }, out: { json: Order, } }>
export type PlaceOrderPatchContext<E extends Env = any> = Context<E, '/store/order', { in: { json: Order, }, out: { json: Order, } }>
export type GetOrderByIdContext<E extends Env = any> = Context<E, '/store/order/:orderId', { in: { param: {
 orderId: number,
 }, }, out: { param: {
 orderId: number,
 }, } }>
export type DeleteOrderContext<E extends Env = any> = Context<E, '/store/order/:orderId', { in: { param: {
 orderId: number,
 }, }, out: { param: {
 orderId: number,
 }, } }>
export type CreateUserContext<E extends Env = any> = Context<E, '/user', { in: { json: User, }, out: { json: User, } }>
export type CreateUsersWithListInputContext<E extends Env = any> = Context<E, '/user/createWithList', { in: { json: User[], }, out: { json: User[], } }>
export type LoginUserContext<E extends Env = any> = Context<E, '/user/login', { in: { query: LoginUserParams, }, out: { query: LoginUserParams, } }>
export type LogoutUserContext<E extends Env = any> = Context<E, '/user/logout'>
export type GetUserByNameContext<E extends Env = any> = Context<E, '/user/:username', { in: { param: {
 username: string,
 }, }, out: { param: {
 username: string,
 }, } }>
export type UpdateUserContext<E extends Env = any> = Context<E, '/user/:username', { in: { param: {
 username: string,
 },json: User, }, out: { param: {
 username: string,
 },json: User, } }>
export type DeleteUserContext<E extends Env = any> = Context<E, '/user/:username', { in: { param: {
 username: string | null,
 }, }, out: { param: {
 username: string | null,
 }, } }>